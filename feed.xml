<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog &amp;middot; Arnaud Weyts</title>
    <description>This is a simple blog using Jekyll.
</description>
    <link>https://blog.weyts.xyz/</link>
    <atom:link href="https://blog.weyts.xyz/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Sep 2016 09:59:32 +0000</pubDate>
    <lastBuildDate>Thu, 08 Sep 2016 09:59:32 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Building a media server using an old pc</title>
        <description>&lt;p&gt;A week ago I ordered computer parts on Amazon &amp;amp; built a completely new PC for my dad. His old PC had become so slow, it was unbearable.
It didn’t have an SSD, so that explains a lot. But to be honest it wasn’t just the HDD. His computer was just really, really old. His motherboard was still running legacy power, and his processor was pretty much done for too. So I decided to build him a new one.&lt;/p&gt;

&lt;p&gt;I still had some parts laying around from my old computer that weren’t completely outdated (Intel Core Duo E8400, a decent motherboard). So I decided to use the case and HDD from my dad’s ancient computer and my old parts to create a Frankenstein media server. Turns out old computers with decent enough processors make freaking great media servers. I re-pasted the processor, cleaned it out a bit and it was up and running in minutes.&lt;/p&gt;

&lt;p&gt;I’ll go through the steps to make a simple home file server (accessible by Windows, Linux &amp;amp; macOS), that also allows for remote torrent downloading and can also be used to stream media on devices using Plex server.&lt;/p&gt;

&lt;h1 id=&quot;choosing-your-operating-system&quot;&gt;Choosing your operating system&lt;/h1&gt;
&lt;p&gt;This simple setup is most likely also possible on a Windows server OS, or any Linux server distribution, but I chose for &lt;strong&gt;Ubuntu Server 16.04 LTS&lt;/strong&gt;, it’s convenient, and Ubuntu is usually a tad easier to set up than other distributions like Arch Linux. 16.04 got released only months ago, and it’s a long term support version, so that will also come in handy.&lt;/p&gt;

&lt;h1 id=&quot;making-an-installation-media&quot;&gt;Making an installation media&lt;/h1&gt;
&lt;p&gt;After you chose your preferred OS, you’re gonna have to download the &lt;code class=&quot;highlighter-rouge&quot;&gt;.iso&lt;/code&gt; file and create a bootable installation media.
You can easily install Linux distributions using UNetbootin, you can select the distribution from the dropdown, or you can choose your own ISO, I did the latter.&lt;/p&gt;

&lt;h1 id=&quot;installing-and-setting-up-the-os&quot;&gt;Installing and setting up the OS&lt;/h1&gt;
&lt;p&gt;Reboot into the bootable media you just created, and run through the setup. Ubuntu server has a simple GUI setup so it shouldn’t be that hard.
After the install finishes, you can boot back into your Ubuntu hard drive, and you’ll be greeted with a simple terminal window. Ubuntu server doesn’t ship with a GUI, to make the OS simple and fast. Just log in with your account and we’ll get started by updating all of our packages:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that that’s out of the way, we’ll set a static IP for the server, so we always know where to access it, we’ll have to edit a config file for this. You can check out the current IP for your server by entering:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep note of your current IP (or a different one if you prefer), and your interface name.&lt;/p&gt;

&lt;p&gt;Next you can edit the config file using your preferred text editor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo vim /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using your own network settings, this is what your config file should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto eth0
iface eth0 inet static
  address 192.168.1.69
  netmask 255.255.255.0
  network 192.168.1.0
  broadcast 192.168.1.255
  gateway 192.168.1.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we’ll restart the network service.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo systemctl restart network
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once that’s finished, we’ll install all the extra packages we’ll be using. OpenSSH to manage the server remotely, packages for the file server, and transmission. Transmission will be used to host a web interface for torrent downloads.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install openssh-server smbclient cifs-utils ntp
  ntpdate transmission-cli transmission-common transmission-daemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Time to create the directories we’ll be sharing on the network, you’re basically free to put these wherever, but I would recommend creating something like &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/files&lt;/code&gt; and having a some subdirectories in there, that’s what i’ll be doing.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/files
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/files/public
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo mkdir /var/files/torrents
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chmod -R 775 /var/files/public
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chmod -R 775 /var/files/torrents
&lt;span class=&quot;c&quot;&gt;# optional sticky bit, so a user can't delete other files&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chmod -t /var/files/public
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chmod -t /var/files/torrents
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now comes the most important part, editing the samba configuration to match your setup.
First let’s make a backup copy of the file, just to be safe:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.orig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can edit it using your favorite text editor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo vim /etc/samba/smb.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I recommend you read through the entire configuration file, as every single setting is explained in detail.
Here are some of the most important settings:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set your workgroup, this is important for windows,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the client will need to be in this workgroup&lt;/span&gt;
workgroup &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; EXAMPLENAME
&lt;span class=&quot;c&quot;&gt;# set windows support&lt;/span&gt;
wins support &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; yes
&lt;span class=&quot;c&quot;&gt;# uncomment this line&lt;/span&gt;
name resolve order &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; lmhosts hosts wins bcast
&lt;span class=&quot;c&quot;&gt;# uncomment this line&lt;/span&gt;
security &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; user

&lt;span class=&quot;c&quot;&gt;# add this to the end of the file for your own directories&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Public Files]
  comment &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Public Files
  path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/files/public
  browseable &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; yes
  &lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Torrents]
  comment &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Torrents
  path &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /var/files/torrents
  browseable &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; yes
  &lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s set a samba password, for security reasons.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo smbpasswd -a username
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s setup our transmission daemon, we’ll start by adding our user to the transmission group and setting the permissions right.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo usermod -a -G debian-transmission username
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chgrp -R debian-transmission /var/files/torrents
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we’ll edit the config file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo vim /var/lib/transmission-daemon/info/settings.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now in the config file set the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;umask&quot;: 2&lt;/code&gt; instead of the default 18.
I also recommend changing the transmission user password: &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;rpc-password&quot;: examplepassword&lt;/code&gt;.
You can find more information &lt;a href=&quot;https://help.ubuntu.com/community/TransmissionHowTo#Configure&quot;&gt;here&lt;/a&gt;.
Make sure the transmission-daemon is enabled.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;transmission-daemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that’s all done, we’re basically ready to reboot our server and load all the new daemons from boot.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;all-done&quot;&gt;All done!&lt;/h1&gt;
&lt;p&gt;And that’s it, when your server has rebooted, the file server will be up and running, and so will the transmission server.
You can now upload magnet links or .torrent files via the web interface. Navigate to your server’s ip and the default transmission port to check it out: &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.69:9091&lt;/code&gt;.
You might be prompted with a login, just login with your own user or the transmission user you set. From here you can configure any extra settings transmission might need, the web interface offers exactly the same settings as the actual Transmission client.&lt;/p&gt;

&lt;p&gt;Remember to configure the default download folder to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/files/torrents&lt;/code&gt; or whatever folder you like. This can also be done using the &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.json&lt;/code&gt; file, but the web interface works fine too.&lt;/p&gt;

&lt;p&gt;Another thing to remember is to add the windows clients to the correct workgroup we configured previously! More info &lt;a href=&quot;https://windowsinstructed.com/how-to-change-workgroup-in-windows-10/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;questions-feedback-or-improvements-drop-them-down-below&quot;&gt;Questions, feedback or improvements? Drop them down below!&lt;/h1&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 06:20:00 +0000</pubDate>
        <link>https://blog.weyts.xyz/linux/mediaserver/2016/06/28/building-a-media-server-using-an-old-pc.html</link>
        <guid isPermaLink="true">https://blog.weyts.xyz/linux/mediaserver/2016/06/28/building-a-media-server-using-an-old-pc.html</guid>
        
        
        <category>linux</category>
        
        <category>mediaserver</category>
        
      </item>
    
      <item>
        <title>Building a Jekyll site using Travis</title>
        <description>&lt;p&gt;This website is hosted on GitHub Pages, using a custom domain, CloudFlare for HTTPS, Jekyll and Travis-CI to build the website.
I use a pretty simple script that builds the Jekyll site and pushes the _site directory to the gh-pages branch.
This is done by my lovely &lt;a href=&quot;https://github.com/Block-Bot&quot;&gt;Block-Bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, if you’re completely new to GitHub Pages, you’ll have to set up a repository.
You can find information about that right &lt;a href=&quot;https://pages.github.com&quot;&gt;here&lt;/a&gt;.
Go for a project site, and select start from scratch.
If you don’t have a custom domain set up, your website will be hosted at &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.github.io/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;projectname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.
For more information on setting up a custom domain, check out &lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot;&gt;this&lt;/a&gt; link.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-your-repository&quot;&gt;Setting up your repository&lt;/h1&gt;
&lt;p&gt;You’ll have to clone your repository first to get started.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;repository url&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it, you won’t need to do any other git operations, the deploy script we’re gonna write in a bit will take care of the necessary branching.&lt;/p&gt;

&lt;h1 id=&quot;installing-and-initializing-jekyll&quot;&gt;Installing and initializing Jekyll&lt;/h1&gt;
&lt;p&gt;Jekyll is a Ruby gem, so you’ll have to &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;install Ruby&lt;/a&gt; first.
Once Ruby is installed you can simply run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# you might have to sudo this operation&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install jekyll
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;repository&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll new . --force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This installs Jekyll and turns your repository into a Jekyll environment.
Once the command finishes, your directory structure should look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── README.md
├── _config.yml
├── _includes
│   ├── footer.html
│   ├── head.html
│   ├── header.html
│   ├── icon-github.html
│   └── ...
├── _layouts
│   ├── default.html
│   ├── page.html
│   └── post.html
├── _posts
│   └── 2016-06-16-first-time-trying-out-jekyll.md
├── _sass
│   ├── _base.scss
│   ├── _layout.scss
│   └── _syntax-highlighting.scss
├── about.md
├── css
│   └── main.scss
├── feed.xml
└── index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Jekyll initialized a default blog with the default theme, and you can already check it out by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and navigating to localhost:4000 in your browser.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file is the heart of your Jekyll installation, check out &lt;a href=&quot;https://jekyllrb.com/docs/configuration/&quot;&gt;this&lt;/a&gt; to configure it to your needs. The generated site is available in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory. This is what’s being served to your localhost:4000.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-travis-ci&quot;&gt;Setting up Travis-CI&lt;/h1&gt;
&lt;p&gt;Log in to your GitHub account on the Travis website &amp;amp; add your repository. Travis provides free workers for public GitHub repositories.
Let’s start with installing the Travis gem, this isn’t fully necessary, but will be useful later on.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install travis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can continue by making a Travis file in our repository root, this is used by Travis to determine the scripts and settings for your worker.&lt;/p&gt;

&lt;p&gt;This is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; file i’m using for this blog.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this installs jekyll on the worker&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gem install jekyll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this runs the custom deploy script&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./buildscripts/deploy.sh&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# this is the GitHub access token, more info below, don't copy this&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# because the token won't work.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xU/E/Uual0ARqXZALTsUpRdTE9lIyUxeflYfcVEDG812iGq7F/...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next we’re gonna have to use a GitHub access token, so that our Travis worker can actually use an account to push to your repository.
It’s your decision to make, you can use your own account, or you make a new bot account, and give it push access to the repository.
Click &lt;a href=&quot;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&quot;&gt;this link&lt;/a&gt; to figure out how to generate an access token for an account.&lt;/p&gt;

&lt;p&gt;You can also generate one in your repository using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -u &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt; -d &lt;span class=&quot;s1&quot;&gt;'{&quot;scopes&quot;:[&quot;repo&quot;],
  &quot;note&quot;:&quot;push to gh-pages from travis&quot;}'&lt;/span&gt; https://api.github.com/authorizations
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you have your access token, you can encrypt it using Travis, run this command to encrypt the variable and add it to the .travis.yml file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;travis encrypt &lt;span class=&quot;nv&quot;&gt;GH_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;secret_token --add
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-deploy-script&quot;&gt;The deploy script&lt;/h1&gt;
&lt;p&gt;To deploy the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory to the gh-pages branch, we’ll have to make use of a deploy script.
I’ve created a more or less universal version.&lt;/p&gt;

&lt;p&gt;It’s on GitHub right &lt;a href=&quot;https://github.com/ArnaudWeyts/blog/blob/master/buildscripts/deploy.sh&quot;&gt;here&lt;/a&gt;.
This script will work for any repository, if you fill in your own variables at the beginning &amp;amp; add the build steps in the &lt;code class=&quot;highlighter-rouge&quot;&gt;doCompile&lt;/code&gt; function.
For a Jekyll blog, the function is simply:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;doCompile &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    jekyll build
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h1&gt;
&lt;p&gt;You just made your own Jekyll blog using Travis, anytime you push to the master branch, Travis will take care of everything and publish your changes online. Happy blogging!&lt;/p&gt;

</description>
        <pubDate>Thu, 16 Jun 2016 11:30:00 +0000</pubDate>
        <link>https://blog.weyts.xyz/travis/jekyll/2016/06/16/building-a-jekyll-site-using-travis.html</link>
        <guid isPermaLink="true">https://blog.weyts.xyz/travis/jekyll/2016/06/16/building-a-jekyll-site-using-travis.html</guid>
        
        
        <category>travis</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Making a new theme</title>
        <description>&lt;p&gt;I’ve just gotten started using Jekyll, and as you can see, there’s not a lot to see here yet.
I’ll be trying to implement my own theme by rewriting the default layouts and sass code.
I’m probably gonna try to make something like the &lt;a href=&quot;https://jasonlong.github.io/cayman-theme/&quot;&gt;Cayman theme&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jun 2016 11:20:00 +0000</pubDate>
        <link>https://blog.weyts.xyz/jekyll/theme/2016/06/16/first-time-trying-out-jekyll.html</link>
        <guid isPermaLink="true">https://blog.weyts.xyz/jekyll/theme/2016/06/16/first-time-trying-out-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>theme</category>
        
      </item>
    
  </channel>
</rss>
